AWSTemplateFormatVersion: "2010-09-09"
Description: A generic CloudFormation template to create a DynamoDB table and populate it with mock data from S3. For improved performance when querying by secondary keys, add a GSI to the DynamoDB table resource

Parameters:
  TableName:
    Type: String
    Default: MyTable
    Description: Name of the DynamoDB table
  SecondaryKey:
    Type: String
    Default: ""
    Description: Optional secondary key for table query

  S3BucketName:
    Type: String
    Default: ""
    Description: Name of the S3 bucket containing data to prepopulate into the table

  S3ObjectKey:
    Type: String
    Default: ""
    Description: S3 object key for the data to prepopulate into the table

Conditions:
  PrepopulateDataCondition: !And
    - !Not [!Equals ["", !Ref S3BucketName]]
    - !Not [!Equals ["", !Ref S3ObjectKey]]

  NoCreateGSI: !Equals ["", !Ref SecondaryKey]
  CreateGSI: !Not [!Equals ["", !Ref SecondaryKey]]

Resources:
  DynamoDbTable:
    Type: AWS::DynamoDB::Table
    Condition: NoCreateGSI
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  DynamoDbTableWithGSI:
    Type: AWS::DynamoDB::Table
    Condition: CreateGSI
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: !Ref SecondaryKey
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: !Ref SecondaryKey
          KeySchema:
            - AttributeName: !Ref SecondaryKey
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  PopulateTableFunction:
    Type: AWS::Lambda::Function
    Condition: PrepopulateDataCondition
    Properties:
      Runtime: python3.13
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import os

          def handler(event, context):
              response_data = {}
              try:
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      table_name = event['ResourceProperties']['TableName']
                      s3_bucket = event['ResourceProperties']['S3BucketName']
                      s3_key = event['ResourceProperties']['S3ObjectKey']
                      
                      # Download the mock data file from S3
                      s3_client = boto3.client('s3')
                      tmp_file = '/tmp/data.json'
                      s3_client.download_file(s3_bucket, s3_key, tmp_file)
                      
                      # Read the mock data file
                      with open(tmp_file, 'r') as file:
                          items = json.load(file)
                      
                      # Connect to DynamoDB
                      dynamodb = boto3.resource('dynamodb')
                      table = dynamodb.Table(table_name)
                      
                      # Insert items into the table
                      with table.batch_writer() as batch:
                          for item in items:
                              batch.put_item(Item=item)
                      
                      response_data['Message'] = f'Successfully populated {len(items)} items into {table_name}'
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print(f'Error: {str(e)}')
                  response_data['Error'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: PrepopulateDataCondition
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                # Resource: !GetAtt DynamoDbTable.Arn
                Resource:
                  !If [
                    CreateGSI,
                    !GetAtt DynamoDbTableWithGSI.Arn,
                    !GetAtt DynamoDbTable.Arn,
                  ]
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/${S3ObjectKey}"

  PopulateTable:
    Type: Custom::PopulateTable
    Condition: PrepopulateDataCondition
    Properties:
      ServiceToken: !GetAtt PopulateTableFunction.Arn
      TableName: !If [CreateGSI, !Ref DynamoDbTableWithGSI, !Ref DynamoDbTable]
      S3BucketName: !Ref S3BucketName
      S3ObjectKey: !Ref S3ObjectKey

Outputs:
  TableName:
    Description: Name of the created DynamoDB table
    Value: !If [CreateGSI, !Ref DynamoDbTableWithGSI, !Ref DynamoDbTable]
  TableArn:
    Description: ARN of the created DynamoDB table
    Value:
      !If [
        CreateGSI,
        !GetAtt DynamoDbTableWithGSI.Arn,
        !GetAtt DynamoDbTable.Arn,
      ]
