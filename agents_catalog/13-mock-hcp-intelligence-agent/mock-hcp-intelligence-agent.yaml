AWSTemplateFormatVersion: "2010-09-09"
Description: Creates an Amazon Bedrock Agent for generating mock healthcare provider information.
Parameters:
  AgentAliasName:
    Type: String
    Default: "LATEST"
  BedrockModelId:
    Type: String
    Description: The ID of the Foundation Model to use for the Agent
    Default: us.anthropic.claude-3-5-sonnet-20241022-v2:0
  AgentIAMRoleArn:
    Type: String
    Description: The arn for the agent IAM role
  TableName:
    Type: String
    Default: Providers
    Description: The name of the DynamoDB table for the agent to access
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket containing data to prepopulate into the table
  S3ObjectKey:
    Type: String
    Default: "mock_hcp_data.json"
    Description: S3 object key for the data to prepopulate into the table

Conditions:
  CreateAgentAliasCondition: !Not [!Equals [!Ref AgentAliasName, ""]]

Resources:
  ####################
  ##### Database #####
  ####################

  DynamoDbTable:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "dynamodb.yaml"
      Parameters:
        TableName: !Ref TableName
        SecondaryKey: "FullName"
        S3BucketName: !Ref S3BucketName
        S3ObjectKey: !Ref S3ObjectKey

  #######################
  ##### ActionGroup #####
  #######################

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Scan
                Resource:
                  - !GetAtt DynamoDbTable.Outputs.TableArn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Sub ${DynamoDbTable.Outputs.TableArn}/*

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Get mock data about healthcare providers
      FunctionName: "get-hcp-intelligence-mock-data"
      Runtime: python3.13
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ACTION_GROUP: "GetMockHCPIntelligence"
          LOG_LEVEL: "DEBUG"
          TABLE_NAME: !GetAtt DynamoDbTable.Outputs.TableName
      PackageType: Zip
      Code: "action-groups/get-mock-hcp-intelligence"

  LambdaAgentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*

  LambdaAgentAliasPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*

  #   ###################
  #   ##### Agent #####
  #   ###################
  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      ActionGroups:
        - ActionGroupName: "UserInputAction"
          ParentActionGroupSignature: "AMAZON.UserInput"
          ActionGroupState: "ENABLED"
        - ActionGroupName: GetMockHCPIntelligence
          Description: Get mock healthcare provider data.
          ActionGroupExecutor:
            Lambda: !GetAtt LambdaFunction.Arn
          ActionGroupState: ENABLED
          FunctionSchema:
            Functions:
              - Name: get_mock_content_preferences
                Description: Retrieve synthetic data that describes channel preference (digital vs face-to-face), content preference (video vs text vs interactive), and topics of interest for a given HCP
                Parameters:
                  full_name:
                    Description: "First and last name without any titles, e.g. Alejandro Rosalez, or John Stiles"
                    Type: string
                    Required: True
              - Name: get_mock_engagement_data
                Description: Retrieve synthetic engagement data for topics of interest, field interaction notes, and medical information requests.
                Parameters:
                  full_name:
                    Description: "First and last name without any titles, e.g. Alejandro Rosalez, or John Stiles"
                    Type: string
                    Required: True
              - Name: get_mock_public_profile
                Description: "Retrieve recent examples of scientific journal publications, news articles, and social media posts."
                Parameters:
                  full_name:
                    Description: "First and last name without any titles, e.g. Alejandro Rosalez, or John Stiles"
                    Type: string
                    Required: True
      AgentName: mock-hcp-intelligence-agent
      AgentResourceRoleArn: !Ref AgentIAMRoleArn
      AutoPrepare: True
      Description: "Get mock information about health care providers"
      FoundationModel: !Ref BedrockModelId
      GuardrailConfiguration:
        GuardrailIdentifier: !GetAtt Guardrail.GuardrailId
        GuardrailVersion: !GetAtt Guardrail.Version
      Instruction: |
        Analyze the available data for the specified healthcare provider to develop a personalized engagement strategy. Follow these steps:

        1. Gather and synthesize data from all available sources:

          * Content preferences (delivery channels, topics, formats)
          * Historical engagement metrics (email opens, content views, meeting patterns)
          * CRM interaction notes and information requests
          * Public professional activities (publications, social media presence, speaking engagements)

        2. Identify key patterns and insights:

          * Preferred communication channels and timing
          * High-engagement topics and content formats
          * Professional interests and focus areas
          * Gaps in current engagement approach

        3. Develop a tailored engagement plan including:

          * Recommended content topics and formats
          * Optimal communication channels and frequency
          * Specific engagement opportunities based on the HCP's interests
          * Measurable success metrics for the proposed strategy

        Present your analysis and recommendations in a structured format with clear rationale derived from the data. Highlight the most actionable insights that would meaningfully improve engagement with this HCP.

  AgentAliasResource:
    Type: AWS::Bedrock::AgentAlias
    Condition: CreateAgentAliasCondition
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: !Ref AgentAliasName

  Guardrail:
    Type: AWS::Bedrock::Guardrail
    Properties:
      BlockedInputMessaging: "Sorry, your query violates our usage policies."
      BlockedOutputsMessaging: "Sorry, I am unable to reply because the output violates our usage policies."
      ContentPolicyConfig:
        FiltersConfig:
          - InputStrength: "HIGH"
            OutputStrength: "HIGH"
            Type: "MISCONDUCT"
          - InputStrength: "HIGH"
            OutputStrength: "NONE"
            Type: "PROMPT_ATTACK"
      Description: Turn on to block profane words and other harmful content.
      Name: MockHCPIntelligenceGuardrail
      WordPolicyConfig:
        ManagedWordListsConfig:
          - Type: PROFANITY

Outputs:
  AgentId:
    Description: Agent ID
    Value: !Ref Agent
  AgentAliasId:
    Description: Agent Alias ID
    Value: !GetAtt AgentAliasResource.AgentAliasId
    Condition: CreateAgentAliasCondition
