AWSTemplateFormatVersion: '2010-09-09'
Description: 'Comprehensive Genomics VEP Pipeline Infrastructure - Creates S3 buckets, IAM roles, DynamoDB tables, Lake Formation database, and supporting infrastructure'

Parameters:
  ProjectName:
    Type: String
    Default: 'genomics-vep-pipeline'
    Description: 'Name prefix for all resources'
  
  VcfInputBucketName:
    Type: String
    Default: 'genomics-vcf-input-bucket'
    Description: 'S3 bucket for input VCF files'
    
  VepOutputBucketName:
    Type: String
    Default: 'genomics-vep-output-bucket'
    Description: 'S3 bucket for VEP workflow outputs'
    
  VariantStoreName:
    Type: String
    Default: 'genomicsvariantstore'
    Description: 'Name for HealthOmics variant store'
    
  AnnotationStoreName:
    Type: String
    Default: 'genomicsannotationstore'
    Description: 'Name for HealthOmics annotation store'
    
  DatabaseName:
    Type: String
    Default: 'genomics_agent_db2'
    Description: 'Lake Formation database name'
    
  BatchSize:
    Type: Number
    Default: 20
    Description: 'Number of VCF files to process in each batch'
    
  CreateNewKMSKey:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Create a new CMK for encryption (true) or use existing KMS key ARN (false)'
    
  ExistingKMSKeyArn:
    Type: String
    Default: ''
    Description: 'Existing KMS Key ARN (only required if CreateNewKMSKey is false)'
    
  CreateNewReferenceStore:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Create a new reference store (true) or use existing reference store ID (false)'
    
  ExistingReferenceStoreId:
    Type: String
    Default: ''
    Description: 'Existing HealthOmics Reference Store ID (only required if CreateNewReferenceStore is false)'
    
  ReferenceStoreName:
    Type: String
    Default: 'genomics-reference-store'
    Description: 'Name for new reference store (only used if CreateNewReferenceStore is true)'

Conditions:
  CreateKMSKey: !Equals [!Ref CreateNewKMSKey, 'true']
  UseExistingKMSKey: !Equals [!Ref CreateNewKMSKey, 'false']
  CreateReferenceStore: !Equals [!Ref CreateNewReferenceStore, 'true']
  UseExistingReferenceStore: !Equals [!Ref CreateNewReferenceStore, 'false']

Resources:
  # Customer Managed Key (CMK) for Encryption
  GenomicsKMSKey:
    Type: AWS::KMS::Key
    Condition: CreateKMSKey
    Properties:
      Description: 'Customer Managed Key for Genomics VEP Pipeline - Encrypts genomic data across HealthOmics, S3, DynamoDB, and other services'
      KeyUsage: ENCRYPT_DECRYPT
      KeySpec: SYMMETRIC_DEFAULT
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key for genomics services
            Effect: Allow
            Principal:
              Service:
                - omics.amazonaws.com
                - lambda.amazonaws.com
                - dynamodb.amazonaws.com
                - s3.amazonaws.com
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              Service:
                - omics.amazonaws.com
                - lambda.amazonaws.com
                - dynamodb.amazonaws.com
                - s3.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
            Condition:
              Bool:
                'kms:GrantIsForAWSResource': 'true'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: GenomicDataEncryption
        - Key: Environment
          Value: Production

  # KMS Key Alias
  GenomicsKMSKeyAlias:
    Type: AWS::KMS::Alias
    Condition: CreateKMSKey
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-genomics-key'
      TargetKeyId: !Ref GenomicsKMSKey

  # HealthOmics Reference Store
  GenomicsReferenceStore:
    Type: AWS::Omics::ReferenceStore
    Condition: CreateReferenceStore
    Properties:
      Name: !Ref ReferenceStoreName
      Description: 'Reference store for genomics VEP pipeline containing reference genomes'
      SseConfig:
        Type: KMS
        KeyArn: !If 
          - CreateKMSKey
          - !GetAtt GenomicsKMSKey.Arn
          - !Ref ExistingKMSKeyArn
      Tags:
        Project: !Ref ProjectName
        Purpose: GenomicReferenceData
        Environment: Production

  # S3 Buckets
  VcfInputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${VcfInputBucketName}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !If 
                - CreateKMSKey
                - !GetAtt GenomicsKMSKey.Arn
                - !Ref ExistingKMSKeyArn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  VepOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${VepOutputBucketName}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !If 
                - CreateKMSKey
                - !GetAtt GenomicsKMSKey.Arn
                - !Ref ExistingKMSKeyArn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # DynamoDB Table for tracking
  VcfTrackingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-tracking'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: SampleID
          AttributeType: S
        - AttributeName: ProcessingStage
          AttributeType: S
      KeySchema:
        - AttributeName: SampleID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProcessingStageIndex
          KeySchema:
            - AttributeName: ProcessingStage
              KeyType: HASH
            - AttributeName: SampleID
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !If 
          - CreateKMSKey
          - !GetAtt GenomicsKMSKey.Arn
          - !Ref ExistingKMSKeyArn

  # IAM Role for Lambda Functions
  GenomicsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GenomicsLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - omics:GetWorkflow
                  - omics:ListWorkflows
                  - omics:StartRun
                  - omics:GetRun
                  - omics:ListRuns
                  - omics:GetVariantStore
                  - omics:ListVariantStores
                  - omics:GetAnnotationStore
                  - omics:ListAnnotationStores
                Resource: 
                  - !Sub 'arn:aws:omics:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub '${VcfInputBucket.Arn}/*'
                  - !Sub '${VepOutputBucket.Arn}/*'
                  - !GetAtt VcfInputBucket.Arn
                  - !GetAtt VepOutputBucket.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt VcfTrackingTable.Arn
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-*'
              - Effect: Allow
                Action:
                  - lakeformation:GetDataAccess
                  - lakeformation:GrantPermissions
                  - lakeformation:RevokePermissions
                Resource: !Sub 'arn:aws:lakeformation:${AWS::Region}:${AWS::AccountId}:catalog:${AWS::AccountId}'
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetTable
                  - glue:GetPartitions
                  - glue:CreateTable
                  - glue:UpdateTable
                Resource: 
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${DatabaseName}'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${DatabaseName}/*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt HealthOmicsWorkflowRole.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:GenerateDataKey
                Resource: !If 
                  - CreateKMSKey
                  - !GetAtt GenomicsKMSKey.Arn
                  - !Ref ExistingKMSKeyArn

  # IAM Role for HealthOmics Workflows
  HealthOmicsWorkflowRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-healthomics-workflow-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: omics.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: HealthOmicsWorkflowPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub '${VcfInputBucket.Arn}/*'
                  - !Sub '${VepOutputBucket.Arn}/*'
                  - !GetAtt VcfInputBucket.Arn
                  - !GetAtt VepOutputBucket.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:GenerateDataKey
                Resource: !If 
                  - CreateKMSKey
                  - !GetAtt GenomicsKMSKey.Arn
                  - !Ref ExistingKMSKeyArn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/omics/*'

  # IAM Role for Agent Queries
  GenomicsAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-agent-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
                - glue.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: GenomicsAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - athena:StopQueryExecution
                  - athena:GetWorkGroup
                Resource: 
                  - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/primary'
                  - !Sub 'arn:aws:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/AwsDataCatalog'
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetTable
                  - glue:GetPartitions
                  - glue:GetTables
                Resource: 
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${DatabaseName}'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${DatabaseName}/*'
              - Effect: Allow
                Action:
                  - lakeformation:GetDataAccess
                  - lakeformation:GetResourceLFTags
                  - lakeformation:ListLFTags
                Resource: !Sub 'arn:aws:lakeformation:${AWS::Region}:${AWS::AccountId}:catalog:${AWS::AccountId}'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${VepOutputBucket.Arn}/*'
                  - !GetAtt VepOutputBucket.Arn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource: !GetAtt VcfTrackingTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
              - Effect: Allow
                Action:
                  - omics:GetVariantStore
                  - omics:ListVariantStores
                  - omics:GetAnnotationStore
                  - omics:ListAnnotationStores
                Resource: !Sub 'arn:aws:omics:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource: !If 
                  - CreateKMSKey
                  - !GetAtt GenomicsKMSKey.Arn
                  - !Ref ExistingKMSKeyArn

  # Lake Formation Database
  GenomicsDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref DatabaseName
        Description: 'Database for genomics variant analysis'

  # Lambda Function for VCF Processing
  VcfProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-vcf-processor'
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt GenomicsLambdaExecutionRole.Arn
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref VcfTrackingTable
          OUTPUT_URI: !Sub 's3://${VepOutputBucket}/'
          BATCH_SIZE: !Ref BatchSize
          ROLE_ARN: !GetAtt HealthOmicsWorkflowRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder - will be updated via deployment notebook'}

  # Lambda Function for Workflow Monitoring
  WorkflowMonitorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-workflow-monitor'
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt GenomicsLambdaExecutionRole.Arn
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref VcfTrackingTable
          VARIANT_STORE_NAME: !Ref VariantStoreName
          ANNOTATION_STORE_NAME: !Ref AnnotationStoreName
          DATABASE_NAME: !Ref DatabaseName
          ROLE_ARN: !GetAtt HealthOmicsWorkflowRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder - will be updated via deployment notebook'}

  # EventBridge Rule for Workflow Status Changes
  WorkflowStatusRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-workflow-status-rule'
      Description: 'Capture HealthOmics workflow status changes'
      EventPattern:
        source:
          - 'aws.omics'
        detail-type:
          - 'HealthOmics Run Status Change'
        detail:
          status:
            - 'COMPLETED'
            - 'FAILED'
            - 'CANCELLED'
      State: ENABLED
      Targets:
        - Arn: !GetAtt WorkflowMonitorFunction.Arn
          Id: 'WorkflowMonitorTarget'

  # EventBridge Rule for Variant Import Status Changes
  VariantImportStatusRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-variant-import-status-rule'
      Description: 'Capture HealthOmics variant import status changes'
      EventPattern:
        source:
          - 'aws.omics'
        detail-type:
          - 'HealthOmics Variant Import Job Status Change'
        detail:
          status:
            - 'COMPLETED'
            - 'FAILED'
            - 'CANCELLED'
      State: ENABLED
      Targets:
        - Arn: !GetAtt WorkflowMonitorFunction.Arn
          Id: 'VariantImportMonitorTarget'

  # Lambda Permissions for EventBridge
  WorkflowMonitorEventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WorkflowMonitorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WorkflowStatusRule.Arn

  VariantImportMonitorEventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WorkflowMonitorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt VariantImportStatusRule.Arn

  # Lambda Permission for S3 (VCF Input Bucket)
  VcfProcessorS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref VcfProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt VcfInputBucket.Arn

  # Lambda Permission for S3 (VEP Output Bucket)
  WorkflowMonitorS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WorkflowMonitorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt VepOutputBucket.Arn

  # CloudWatch Log Groups
  VcfProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${VcfProcessorFunction}'
      RetentionInDays: 30

  WorkflowMonitorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${WorkflowMonitorFunction}'
      RetentionInDays: 30

Outputs:
  KMSKeyArn:
    Description: 'ARN of the KMS key used for encryption'
    Value: !If 
      - CreateKMSKey
      - !GetAtt GenomicsKMSKey.Arn
      - !Ref ExistingKMSKeyArn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'

  KMSKeyId:
    Description: 'ID of the KMS key used for encryption'
    Value: !If 
      - CreateKMSKey
      - !Ref GenomicsKMSKey
      - !Select [1, !Split ['/', !Select [5, !Split [':', !Ref ExistingKMSKeyArn]]]]
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyId'

  ReferenceStoreId:
    Description: 'ID of the HealthOmics reference store'
    Value: !If 
      - CreateReferenceStore
      - !Ref GenomicsReferenceStore
      - !Ref ExistingReferenceStoreId
    Export:
      Name: !Sub '${AWS::StackName}-ReferenceStoreId'

  ReferenceStoreName:
    Description: 'Name of the HealthOmics reference store'
    Value: !If 
      - CreateReferenceStore
      - !Ref ReferenceStoreName
      - 'Existing Reference Store'
    Export:
      Name: !Sub '${AWS::StackName}-ReferenceStoreName'

  VcfInputBucketName:
    Description: 'Name of the VCF input S3 bucket'
    Value: !Ref VcfInputBucket
    Export:
      Name: !Sub '${AWS::StackName}-VcfInputBucket'

  VepOutputBucketName:
    Description: 'Name of the VEP output S3 bucket'
    Value: !Ref VepOutputBucket
    Export:
      Name: !Sub '${AWS::StackName}-VepOutputBucket'

  DynamoDBTableName:
    Description: 'Name of the DynamoDB tracking table'
    Value: !Ref VcfTrackingTable
    Export:
      Name: !Sub '${AWS::StackName}-TrackingTable'

  LambdaExecutionRoleArn:
    Description: 'ARN of the Lambda execution role'
    Value: !GetAtt GenomicsLambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionRole'

  HealthOmicsWorkflowRoleArn:
    Description: 'ARN of the HealthOmics workflow role'
    Value: !GetAtt HealthOmicsWorkflowRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WorkflowRole'

  AgentRoleArn:
    Description: 'ARN of the agent role for queries'
    Value: !GetAtt GenomicsAgentRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AgentRole'

  DatabaseName:
    Description: 'Name of the Lake Formation database'
    Value: !Ref GenomicsDatabase
    Export:
      Name: !Sub '${AWS::StackName}-Database'

  VcfProcessorFunctionName:
    Description: 'Name of the VCF processor Lambda function'
    Value: !Ref VcfProcessorFunction
    Export:
      Name: !Sub '${AWS::StackName}-VcfProcessor'

  WorkflowMonitorFunctionName:
    Description: 'Name of the workflow monitor Lambda function'
    Value: !Ref WorkflowMonitorFunction
    Export:
      Name: !Sub '${AWS::StackName}-WorkflowMonitor'
