AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for AgentCore Streamlit app deployment on ECS Fargate'

Parameters:
  Vpccidr:
    Description: Please enter the IP range (CIDR notation) for the VPC
    Type: String
    Default: 10.1.0.0/16

  PublicSubnetAcidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.1.0.0/24

  PublicSubnetBcidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.1.1.0/24

  GitRepoURL:
    Type: String
    Default: 'https://github.com/berilunay/amazon-bedrock-agents-cancer-biomarker-discovery.git'
    Description: Git repository URL where the code files are stored

  EnvironmentName:
    Type: String
    Description: The name of the agent environment, used to differentiate agent application. Must be lowercase, contain one number, and be no more than 5 characters long.
    Default: env1
    MaxLength: 5
    AllowedPattern: ^[a-z]{1,4}[0-9]$
    ConstraintDescription: Must be lowercase, contain one number at the end, and be no more than 5 characters

  ImageTag:
    Type: String
    Default: latest
    Description: Tag of the Docker image to deploy
  GitBranch:
    Type: String
    Description: 'The github branch to clone, change only for dev testing'
    Default: 'strands-streamlit-ui'

Mappings:
  ELBRegionMap:
    'us-east-1':
      ELBAccountId: '127311923021'
    'us-west-2':
      ELBAccountId: '797873946194'
  CFRegionMap:
    'us-east-1':
      PrefixListCloudFront: 'pl-3b927c52'
    'us-west-2':
      PrefixListCloudFront: 'pl-82a045eb'

Resources:
  LogsPolicyAgentCore:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Path: /
      ManagedPolicyName: !Sub "LogsPolicyAgentCore${EnvironmentName}${AWS::Region}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${VPCLogGroupAgentCore}:*'
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${VPCLogGroupAgentCore}'
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:PutRetentionPolicy'
            Resource: 
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${VPCLogGroupAgentCore}'

  VPCAgentCore:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpccidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'VPCAgentCore'
  
  VPCLogGroupAgentCore:
    DeletionPolicy: Retain
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
      
  VPCLogRoleAgentCore:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt LogsPolicyAgentCore.PolicyArn
  
  VPCFlowLogAgentCore:
    Type: "AWS::EC2::FlowLog"
    Properties:
      ResourceId: !Ref VPCAgentCore
      ResourceType: VPC
      TrafficType: ALL
      LogGroupName: !Ref VPCLogGroupAgentCore
      DeliverLogsPermissionArn: !GetAtt VPCLogRoleAgentCore.Arn
  
  InternetGatewayAgentCore:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGatewayAgentCore

  InternetGatewayAttachmentAgentCore:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayAgentCore
      VpcId: !Ref VPCAgentCore

  PublicSubnetAAgentCore:  
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetAcidr
      VpcId: !Ref VPCAgentCore
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PublicSubnetAAgentCore

  PublicSubnetBAgentCore:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetBcidr
      VpcId: !Ref VPCAgentCore
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PublicSubnetBAgentCore

  NatGatewayAEIPAgentCore:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachmentAgentCore
    Properties:
      Domain: vpc

  NatGatewayBEIPAgentCore:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachmentAgentCore
    Properties:
      Domain: vpc

  NatGatewayAAgentCore:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIPAgentCore.AllocationId
      SubnetId: !Ref PublicSubnetAAgentCore

  NatGatewayBAgentCore:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIPAgentCore.AllocationId
      SubnetId: !Ref PublicSubnetBAgentCore
  
  PublicRouteTableAgentCore:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCAgentCore
      Tags:
        - Key: Name
          Value: PublicRouteTableAgentCore
  
  DefaultPublicRouteAgentCore:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachmentAgentCore
    Properties:
      RouteTableId: !Ref PublicRouteTableAgentCore
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayAgentCore

  PublicSubnetARouteTableAssociationAgentCore:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableAgentCore
      SubnetId: !Ref PublicSubnetAAgentCore

  PublicSubnetBRouteTableAssociationAgentCore:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableAgentCore
      SubnetId: !Ref PublicSubnetBAgentCore

  ECSClusterAgentCore:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: StreamlitClusterAgentCore

  TaskDefinitionAgentCore:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: streamlit-agentcore-task
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ExecutionRoleAgentCore
      TaskRoleArn: !Ref TaskRoleAgentCore
      ContainerDefinitions:
        - Name: streamlit-agentcore-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StreamlitImageRepoAgentCore}:${ImageTag}
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroupAgentCore
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: streamlit-agentcore

  ExecutionRoleAgentCore:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'

  TaskRoleAgentCore:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                  - 'bedrock:InvokeModelWithResponseStream'
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'

  CloudWatchLogsGroupAgentCore:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/streamlit-agentcore-app-${AWS::StackName}
      RetentionInDays: 14

  ECSServiceAgentCore:
    Type: AWS::ECS::Service
    DependsOn: StreamlitHTTPListenerAgentCore
    Properties:
      ServiceName: streamlit-agentcore-service
      Cluster: !Ref ECSClusterAgentCore
      TaskDefinition: !Ref TaskDefinitionAgentCore
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: 
            - !Ref PublicSubnetAAgentCore
            - !Ref PublicSubnetBAgentCore
          SecurityGroups:
            - !Ref ContainerSecurityGroupAgentCore
      LoadBalancers:
        - ContainerName: streamlit-agentcore-container
          ContainerPort: 80
          TargetGroupArn: !Ref StreamlitContainerTargetGroupAgentCore

  ContainerSecurityGroupAgentCore:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AgentCore Streamlit container
      VpcId: !Ref VPCAgentCore
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref StreamlitALBSecurityGroupAgentCore

  StreamlitHTTPListenerAgentCore:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref StreamlitApplicationLoadBalancerAgentCore
      Port: 80
      Protocol: HTTP
      DefaultActions: 
        - FixedResponseConfig:
            ContentType: text/plain
            MessageBody: Access denied
            StatusCode: 403
          Type: fixed-response

  StreamlitContainerTargetGroupAgentCore:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: "HTTP"
      TargetType: ip
      VpcId: !Ref VPCAgentCore
      Name: !Join ['-', ['StreamlitContainerTGAgentCore', !Ref EnvironmentName]]
  
  StreamlitALBListenerRuleAgentCore:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref StreamlitContainerTargetGroupAgentCore
      Conditions: 
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: X-Custom-Header
            Values: 
              - !Join ['-', [!Sub "${AWS::StackName}", !Sub "${AWS::AccountId}"]]
      ListenerArn: !Ref StreamlitHTTPListenerAgentCore
      Priority: 1

  StreamlitApplicationLoadBalancerAgentCore:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['-', ['StreamlitALBAgentCore', !Ref EnvironmentName]]
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref LoggingBucketAgentCore
        - Key: access_logs.s3.prefix
          Value: alb/logs
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Scheme: internet-facing
      Type: application
      Subnets: 
        - !Ref PublicSubnetAAgentCore
        - !Ref PublicSubnetBAgentCore
      SecurityGroups: 
        - !Ref StreamlitALBSecurityGroupAgentCore
      IpAddressType: ipv4

  StreamlitALBSecurityGroupAgentCore:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the internet for AgentCore
      VpcId: !Ref VPCAgentCore
      Tags:
        - Key: Name
          Value: !Join ['-', ['StreamlitALBSecurityGroupAgentCore', !Ref EnvironmentName]]
  
  ALBSGDefaultOutBoundRuleAgentCore:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt StreamlitALBSecurityGroupAgentCore.GroupId
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0
      Description: Deny all outbound traffic by default

  ALBSGOutBoundRuleAgentCore:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt StreamlitALBSecurityGroupAgentCore.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      Description: Allow container port outbound
  
  ALBSGInBoundRuleAgentCore:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StreamlitALBSecurityGroupAgentCore.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourcePrefixListId: !FindInMap ['CFRegionMap', !Ref 'AWS::Region', 'PrefixListCloudFront']
      Description: Allow container port from CloudFront 

  DistributionAgentCore:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig: 
        Origins: 
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt StreamlitApplicationLoadBalancerAgentCore.DNSName
            Id: !Ref StreamlitApplicationLoadBalancerAgentCore
            OriginCustomHeaders:
               - HeaderName: X-Custom-Header
                 HeaderValue: !Join ['-', [!Sub "${AWS::StackName}", !Sub "${AWS::AccountId}"]]
            CustomOriginConfig:
              HTTPPort: '80'
              OriginProtocolPolicy: 'http-only'
        DefaultCacheBehavior: 
          ForwardedValues:
            Cookies:
              Forward: whitelist
              WhitelistedNames: [token]
            QueryString: true
            QueryStringCacheKeys: [code]
          Compress: true
          ViewerProtocolPolicy: 'https-only'
          AllowedMethods: 
            - "HEAD"
            - "DELETE"
            - "POST"
            - "GET"
            - "OPTIONS"
            - "PUT"
            - "PATCH"
          CachedMethods: 
            - "HEAD"
            - "GET"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
          TargetOriginId: !Ref StreamlitApplicationLoadBalancerAgentCore
        PriceClass: "PriceClass_All"
        Enabled: true                  
        HttpVersion: "http2"
        IPV6Enabled: true
        Logging: 
          Bucket: !Sub '${LoggingBucketAgentCore}.s3.amazonaws.com'
          IncludeCookies: true
          Prefix: !Sub distribution-agentcore-${EnvironmentName}-logs/
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: TLSv1.2_2018
      Tags:
        - Key: CloudfrontStreamlitAppAgentCore
          Value: !Sub ${AWS::StackName}-CloudfrontAgentCore

  LoggingBucketAgentCore: 
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  LoggingBucketPolicyAgentCore:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref LoggingBucketAgentCore
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucketAgentCore}/*
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              AWS: !Sub 
                    - arn:aws:iam::${ElbAccount}:root
                    - {ElbAccount: !FindInMap [ELBRegionMap, !Ref 'AWS::Region', ELBAccountId]}
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucketAgentCore}/alb/logs/AWSLogs/${AWS::AccountId}/*
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucketAgentCore}/*
              - !Sub arn:aws:s3:::${LoggingBucketAgentCore}
            Principal: "*"
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  StreamlitImageRepoAgentCore:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true

Outputs:
  CloudfrontURLAgentCore:
    Description: "AgentCore CloudFront URL"
    Value: !GetAtt DistributionAgentCore.DomainName
  ECRRepositoryURIAgentCore:
    Description: URI of the AgentCore ECR repository
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StreamlitImageRepoAgentCore}